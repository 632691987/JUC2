================================================================================================================

wait/sleep 的区别
1, sleep 是 Thread 的静态方法，wait 是 Object 的方法，任何对象实例都能调用。
2, sleep 不会释放锁，它也不需要占用锁。wait 会释放锁，但调用它的前提是当前线程占有锁(即代码要在 synchronized 中)。
3, 它们都可以被 interrupted 方法中断。

锁，就是管程对象，monitor, 持有monitor, 进入和退出，就是同步线程

================================================================================================================

Lock 与的 Synchronized 区别
1, Lock Lock 是一个类，synchronized 是 Java 语言的关键字
2, 采用 synchronized 不需要用户去手动释放锁，系统会自动让线程释放对锁的占用；
   Lock 则必须要用户去手动释放锁，如果没有主动释放锁，就有可能导致出现死锁现象。
3, 当有异常发生的时候，Synchronized 会自动释放锁，而 Lock 不会
4, 当竞争激烈的时候，也就是多个线程竞争的时候，lock 的效率要高

================================================================================================================

公平锁和非公平锁

非公平锁： 可能有些线程无法工作, 但是效率高
公平所  : 平均使用各线程，效率很低

================================================================================================================

可重入锁和非可重入锁
sychronized 和 Lock 其实就是可重入锁
就是说，一旦占用一把锁，就能使用锁保护范围里面的所有资源, 例如，一个类有三个静态函数（都使用sychronized），一旦一个线程使用其中一个函数，那么可以
自由进出其他两个静态函数而无需等待。因为这三个静态函数都是由类的静态锁维护的

================================================================================================================

死锁，就是两个以上的线程互相竞争造成互相等待对方释放资源的过程。

可能的原因：
1, 系统资源不足
2, 系统资源分配不当
3, 获取资源的过程错误


================================================================================================================

创建线程：
1, extends Thread
2, Implements runable
3, Callable
4, ThreadPool

================================================================================================================

乐观锁
1, 没有锁
2, 支持并发操作，通过版本号进行控制


悲观锁
特点：
1, 任何操作都会上锁，解锁。
2, 只能有一条线程在运行。不支持并发操作。


顺带说说，在数据库里面，表锁和行锁。行锁会发生死锁。


================================================================================================================

读锁和写锁都会发生死锁
读所是共享锁
写所是独占锁

optimistic lock   乐观锁
Pessimistic lock  悲观锁



================================================================================================================